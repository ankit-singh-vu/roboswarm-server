from locust import HttpUser, SequentialTaskSet, task

import random

# Suppresses insecure request warning.
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import requests

class AdvancedSequence(SequentialTaskSet):
    {{#each routes}}
    @task
    def route_{{{getId this.id}}}(l):
        {{#ifHasUsers this.users}}
        users = [
            {{#each this.users}}
            { "username": "{{this.username}}", "password": "{{this.password}}" },
            {{/each}}
        ]
        {{/ifHasUsers}}

        {{#ifEquals this.headers.length 0}}
        headers = {
            "Accept-Encoding": "gzip, deflate",
            "Accept": "*/*",
            "Accept-Language": "en-us",
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:90.0) Gecko/20100101 Firefox/90.0"
        }
        {{else}}
        headers = {
            {{#each this.headers}}
            "{{{this.key}}}": "{{{this.value}}}",
            {{/each}}
        }
        {{/ifEquals}}

        {{#ifEquals this.method "GET" }}
        l.client.get("{{{this.path}}}{{{joinQueryParams this.queryParams "&"}}}", headers=headers, verify=False, timeout=7.0)
        {{else ifEquals this.method "POST"}}
        data = { {{#each this.body}}
            "{{{this.key}}}": {{{getBodyValue this.value}}},{{/each}}
        }

        {{!-- Randomly select user to auth with. --}}
        {{#ifHasUsers this.users}}
        u = random.choice(users)
        data["log"] = u["username"]
        data["pwd"] = u["password"]
        {{/ifHasUsers}}

        l.client.post(
            "{{{this.path}}}{{{joinQueryParams this.queryParams "&"}}}",
            {{{getBodyType this.bodyType}}}
            headers=headers,
            verify=False,
            timeout=7.0
        )
        {{else ifEquals this.method "PUT"}}
        data = { {{#each this.body}}
            "{{{this.key}}}": {{{getBodyValue this.value}}},{{/each}}
        }
        l.client.put(
            "{{{this.path}}}{{{joinQueryParams this.queryParams "&"}}}",
            {{{getBodyType this.bodyType}}}
            headers=headers,
            verify=False,
            timeout=7.0
        )
        {{else ifEquals this.method "PATCH"}}
        data = { {{#each this.body}}
            "{{{this.key}}}": {{{getBodyValue this.value}}},{{/each}}
        }
        l.client.patch(
            "{{{this.path}}}{{{joinQueryParams this.queryParams "&"}}}",
            {{{getBodyType this.bodyType}}}
            headers=headers,
            verify=False,
            timeout=7.0
        )
        {{else ifEquals this.method "DELETE"}}
        l.client.delete("{{{this.path}}}{{{joinQueryParams this.queryParams "&"}}}", headers=headers, verify=False, timeout=7.0)
        {{/ifEquals}}

    {{/each}}

class AdvancedSequenceUser(HttpUser):
    tasks = {AdvancedSequence:1}
    wait_time = lambda x: 1